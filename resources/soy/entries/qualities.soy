/* ****************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/*
 * Templates for qualities.
 */
{namespace dma.entries.qualities}

/** Editiing the base character. */
{template .edit}
  {@param? entry: ?}
  {@param? prefix: any}
  {@param index: number}
  {call dma.edit.field_input}
    {param name: ($prefix ? $prefix : '') + 'quality@' + $index + '.name' /}
    {param caption: 'quality name' /}
    {param value: $entry ? lower($entry.name) : '' /}
    {param class: 'narrow' /}
    {param validate: 'any' /}
    {param autocomplete: 'base quality/name' /}
  {/call}
  {if $entry}
    {foreach $name in keys($entry.parameters)}
      {call dma.edit.field_list_multiple}
        {param values:  [
          [ 
            'name' : ($prefix ? $prefix : '') + 'quality@' + $index
                      + '.parameter.name',
            'value': $name,
            'validate': 'any',
            'caption': 'param name'
          ],
          [
            'name': ($prefix ? $prefix : '' ) + 'quality@' + $index
                     + '.parameter.value',
            'value': $entry.parameters[$name],
            'validate': 'any',
            'caption': 'param value'
          ]
        ]/}    
        {param class: 'narrow' /} 
      {/call}
    {/foreach}
  {/if}
  {call dma.edit.field_list_multiple}
    {param values:  [
      [
        'name' : ($prefix ? $prefix : '' ) + 'quality@' + $index
                  + '.parameter.name',
        'value': '',
        'validate': 'any',
        'caption': 'param name'
      ],
      [
        'name': ($prefix ? $prefix : '' ) + 'quality@' + $index
                 + '.parameter.value',
        'value': '',
        'validate': 'any',
        'caption': 'param value'
      ]
    ]/}
    {param class: 'narrow' /}
  {/call}
{/template}

/**
 * The tiny item card.
 *
 * @param entry      The entry rendered.
 */
{template .tiny}
  <div class="entry quality tiny" onclick="details('{$entry.path}')">
    {$entry.name}
    {if length(keys($entry.parameters)) > 0}
      {sp}[
        {foreach $key in keys($entry.parameters)}
          {if isFirst($key) and isLast($key)}            
            {$entry.parameters[$key]}
          {else}
            {$key}: {$entry.parameters[$key]}
          {/if}
          {if not isLast($key)}, {/if}          
        {/foreach}
      ]
    {/if}
  </div>
{/template}

/**
 * The small item card.
 *
 * @param entry The entry rendered.
 */
{template .small}
  <div class="entry item card small">
    <div class="header" style="background-color: #008">
      <div class="actions">
        <div class="sprite white delete" title="permanently delete this"></div>
      </div>

      <div class="title">
        {if $ij.isDM}
          {$entry.DM_name} 
          {if $entry.player_name and $entry.DM_name != $entry.player_name}
            {sp}[{$entry.player_name}]
          {/if} 
        {else}
          {$entry.player_name}
        {/if}
        {sp}({$entry.name})
        {if $ij.isDM and $entry.DM_name != $entry.player_name}
          <br /><span class="subtitle">{$entry.player_name}&nbsp;</span>
        {/if}
      </div>
    </div>

    <div class="contents" style="background-color: #eef; border-color: #ccf">
      <div class="image main">
        {call dma.entry.simplemainfile}
          {param entry: $entry /}
          {param size: 50 /}
        {/call}
      </div>

      {call .statistics}
        {param entry: $entry /}
      {/call}

      <div class="appearance">
        {$entry.appearance}
      </div>

     <div class="short-description">
       {annotate($entry.combined_short_description)}
     </div>

   </div>
  </div>
{/template}

/**
 * The item card.
 *
 * @param entry The entry rendered.
 */
{template .large}
  <div class="entry item card">
    <div class="header" style="background-color: #008">
      <div class="actions">
        <div class="sprite white delete" title="permanently delete this"></div>
      </div>

      <div class="title">
        {if $ij.isDM}
          {$entry.DM_name} 
          {if $entry.player_name and $entry.DM_name != $entry.player_name}
            {sp}[{$entry.player_name}]
          {/if} 
        {else}
          {$entry.player_name}
        {/if}
        {sp}({$entry.name})
        {if $ij.isDM and $entry.DM_name != $entry.player_name}
          <br /><span class="subtitle">{$entry.player_name}&nbsp;</span>
        {/if}
      </div>
    </div>

    <div class="contents" style="background-color: #eef; border-color: #ccf">
      <div class="top-block">
        <div class="align-center size-tiny">
          {$entry.base}
        </div>

        <div class="image main">
          {call dma.entry.simplemainfile}
            {param entry: $entry /}
            {param size: 90 /}
          {/call}
        </div>

        {call .statistics}
          {param entry: $entry /}
        {/call}
      </div>

      <div class="bottom-block">
        <div class="appearance">
          {$entry.appearance}
        </div>

        {if $entry.incomplete.present and $ij.isDM}
          <div class="incomplete">
            {call dma.value.extension}
              {param value: 'incomplete' /}
            {/call}
            {sp}
            {annotate($entry.combined_incomplete)}
          </div>
        {/if}
        
        <div class="description">
          {annotate($entry.combined_description)}
        </div>
        {if $entry.DM_notes.present} 
          <div class="dm-notes block">
            {call dma.value.extension}
              {param value: 'notes' /}
            {/call}
            {sp}
            {$entry.dm_notes.get}
          </div>
        {/if}
        {if $entry.player_notes.present}
          <div class="player-notes block">
            {call dma.value.extension}
              {param value: 'notes' /}
            {/call}
            {sp}
            {$entry.player_notes.get}
          </div>
        {/if}
        {if $entry.container}
          <div class="content">
            {if $entry.campaign.present}
              {foreach $item in $entry.contents}
                {call .tiny}             
                  {param entry: entry($entry.campaign.get.key + '/item/'
                      + $item.name) /}
                {/call}
              {/foreach}
            {/if}
          </div>
        {/if}
        <div class="references">
          {annotate($entry.combined_references)}
        </div>
      </div>
    </div>
  </div>
{/template}

/**
 * Statistics values in item the card.
 *
 * @param entry The entry shown.
 */
{template .statistics}
  <div class="statistics">
    <div class="statistics-lines">
      <div class="value">
        {call dma.value.extension}
          {param value: 'value' /}
        {/call}
        {sp}
        {annotate($entry.combined_value)}
      </div>

      <div class="hp">
        {call dma.value.extension}
          {param value: 'hp' /}
        {/call}
        {sp}
        {$entry.HP} (of{sp}
        {annotate($entry.combined_max_HP)}
      </div>
  </div>
{/template}

/** Printing a summary. */
{template .summary}
  {@param entry: ?}

  {call dma.value.link}
    {param text kind="html"}
      <div class="windowed">
        <i>{commands($entry.formatted_name)}</i>
        <div class="window">
          <div><b>{commands($entry.formatted_name)}</b></div>
          <p>{commands($entry.short_description)}</p>
          <p>{commands($entry.description)}</p>
          {if length($entry.immunities) > 0}
            <p>
              immune{sp}
              {foreach $immunity in $entry.immunities}
                {$immunity}
                {if not isLast($immunity)}, {/if}
              {/foreach}
            </p>
          {/if}
          {if $entry.reflex_modifier.has_value}
            <p>Ref {$entry.reflex_modifier}</p>
          {/if}
          {if $entry.will_modifier.has_value}
            <p>Wil {$entry.will_modifier}</p>
          {/if}
          {if $entry.fortitude_modifier.has_value}
            <p>For {$entry.fortitude_modifier}</p>
          {/if}
          {if $entry.attack_modifier.has_value}
            <p>attack {$entry.attack_modifier}</p>
          {/if}
          {if $entry.damage_modifier.has_value}
            <p>damage {$entry.damage_modifier}</p>
          {/if}
          {if $entry.ac_modifier.has_value}
            <p>AC {$entry.ac_modifier}</p>
          {/if}
          {if $entry.speed.present}
            <p>speed {$entry.speed}</p>
          {/if}
          {if length($entry.skill_modifiers)}
            <p>
              skills{sp}
              {foreach $skill in $entry.skill_modifiers}
                {$skill}
                {if not isLast($skill)}, {/if}
              {/foreach}
            </p>
          {/if}
          {if length($entry.bonus_feats)}
            <p>
              feats{sp}
              {foreach $feat in $entry.bonus_feats}
                {$feat}
                {if not isLast($feat)}, {/if}
              {/foreach}
            </p>
          {/if}
        </div>
      </div>
    {/param}
    {param url: '/quality/' + $entry.base_name /}
  {/call}
  {if length($entry.ability_modifiers) > 0}
    ,{sp}
    {foreach $modifier in $entry.ability_modifiers}
      {$modifier.short}
    {if not isLast($modifier)}, {/if}
    {/foreach}
  {/if}
{/template}
