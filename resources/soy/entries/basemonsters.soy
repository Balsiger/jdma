/* ****************************************************************************
 * Copyright (C) 2002-2014 Peter 'Merlin' Balsiger And Fred 'Mythos' Dobler
 * All Rights Reserved
 *
 * This File Is Part Of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant Is Free Software; You Can Redistribute It And/Or
 * Modify It Under The Terms Of The Gnu General Public License As Published By
 * The Free Software Foundation; Either Version 2 Of The License, Or
 * (At Your Option) Any Later Version.
 *
 * Dungeon Master Assistant Is Distributed In The Hope That It Will Be Useful,
 * But Without Any Warranty; Without Even The Implied Warranty Of
 * Merchantability Or Fitness For A Particular Purpose.  See The
 * Gnu General Public License For More Details.
 *
 * You Should Have Received A Copy Of The Gnu General Public License
 * Along With Dungeon Master Assistant; If Not, Write To The Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, Ma  02111-1307  Usa
 *****************************************************************************/

 /*
 * Templates for base products.
 */
{namespace dma.entries.basemonsters}

/**
 * Show the given entry in standard format.
 * 
 * @param entry The entry to show.
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 */
{template .show}
  {call dma.entry.show}
    {param entry: $entry /}
    {param type: 'base-level' /}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
    {param color: '#080' /}
    {param nodescriptions: true /}
    {param title kind="html"}
      {call dma.entry.title}
        {param title kind="html"}
          {$entry.name}
          {if length($entry.baseNames)}
            {sp}(
              {foreach $base in $entry.baseNames}
                {call dma.page.link}
                  {param text: $base /}
                  {param url: '/monster/'  + $base /}
                {/call}
                {if not isLast($base)}; {/if}
              {/foreach}
            )
          {/if}
        {/param}
        {param color: '#080' /}
      {/call}
    {/param}
    {param stats kind="html"}
      {call .size_and_type}{param entry: $entry /}{/call}
      {call .hit_die}{param entry: $entry /}{/call}
      {call .initiative}{param entry: $entry /}{/call}
      {call .speed}{param entry: $entry /}{/call}
      {call .armor_class}{param entry: $entry /}{/call}
      {call .base_attack_grapple}{param entry: $entry /}{/call}
      {call .attack}{param entry: $entry /}{/call}
      {call .full_attack}{param entry: $entry /}{/call}
      {call .space_reach}{param entry: $entry /}{/call}
      {call .qualities}{param entry: $entry /}{/call}
      {call .saves}{param entry: $entry /}{/call}
      {call .abilities}{param entry: $entry /}{/call}
      {call .skills}{param entry: $entry /}{/call}
      {call .feats}{param entry: $entry /}{/call}
      {call .proficiencies}{param entry: $entry /}{/call}
      {call .languages}{param entry: $entry /}{/call}
      {call .environment}{param entry: $entry /}{/call}
      {call .organization}{param entry: $entry /}{/call}
      {call .challenge_rating}{param entry: $entry /}{/call}
      {call .treasure}{param entry: $entry /}{/call}
      {call .possessions}{param entry: $entry /}{/call}
      {call .alignment}{param entry: $entry /}{/call}
      {call .advancement}{param entry: $entry /}{/call}
      {call .level_adjustment}{param entry: $entry /}{/call}
      {call .synonyms}{param entry: $entry /}{/call}
      {call .categories}{param entry: $entry /}{/call}
      {call .worlds}{param entry: $entry /}{/call}
      {call .incomplete}{param entry: $entry /}{/call}
      {call .reference}{param entry: $entry /}{/call}

      {call .encounter}{param entry: $entry /}{/call}
      {call .description}{param entry: $entry /}{/call}
      {call .combat}{param entry: $entry /}{/call}
      {call .tactics}{param entry: $entry /}{/call}
      {call .character}{param entry: $entry /}{/call}
      {call .reproduction}{param entry: $entry /}{/call}
   {/param}
  {/call}
{/template}

/**
 * Formatting a list of entries.
 *
 * @param title The list title.
 * @param start The start index
 * @param pagesize The size of the page
 * @param entries The entries printed
 * @param label The navigation label for this page
 * @param path The path to this page
 *
 */
{template .list}
  {call dma.entry.list}
    {param title: $title /}
    {param label: $label /}
    {param path: $path /}
    {param start: $start /}
    {param pagesize: $pagesize /}
    {param size: $entries ? length($entries) : 0 /}
    {param titles: [ 'Name', 'Worlds', 'Short Descriptoion'] /}
    {param entries kind="html"}
      {foreach $entry in $entries}
        <tr onclick="util.link(event, '{$entry.path}')">
          {call dma.entry.listEntry}
            {param path: $entry.path /}
            {param values: [
              $entry.name, $entry.worldsString, $entry.short_description
            ] /}
          {/call}
        </tr>
      {/foreach}
    {/param}
  {/call}
{/template}

/** Format a lisf attacks. */
{template .attacks}
  {@param entry: ?}
  {@param attacks: list<?>}
  {@param? secondary: bool}
  {@param? full: bool}

  {foreach $attack in $attacks}
    {if $full}
      {if not $attack.number.isOne}
        {if $attack.number.is_random}
          {$attack.number}
        {else}
          {$attack.number.modifier}
        {/if}
        {sp}
      {/if}
    {/if}
    {$attack.mode} {annotate(call($entry, $secondary
                                    ? 'secondaryAttackBonus' : 'attackBonus',
                                    $attack))}{sp}
    {$attack.style} ({call($entry, $secondary ? 'secondaryDamage' : 'damage',
                           $attack)})
    {if not isLast($attack)} and {/if}
  {/foreach}
{/template}

/**
 * Editiing the base item.
 * 
 * @param entry   The item to edit. 
 * @param id      The id to use for the editing dialog.
 * @param create  Whether to create a new entry
 */
{template .edit}
  {call dma.edit.entry}
    {param entry: $entry /}
    {param type: 'base-level' /}
    {param id: $id /}
    {param create: $create /}
    {param values kind="html"}
      {call dma.edit.value}
        {param name: 'name' /}
        {param label: 'Name' /}
        {param value: $entry.name /}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value_text}
        {param name: 'description' /}
        {param label: 'Description' /}
        {param value: $entry.description /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.value}
        {param name: 'short_description' /}
        {param label: 'Short Description' /}
        {param value: $entry.short_description /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'base' /}
        {param label: 'Base' /}
        {param values: $entry.base_names /}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
        {param autocomplete: 'base item/name' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'synonyms' /}
        {param label: 'Synonyms' /}
        {param values: $entry.synonyms /}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value_list}
        {param name: 'categories' /}
        {param label: 'Categories' /}
        {param values: $entry.categories /}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'worlds' /}
        {param label: 'Worlds' /}
        {param values: $entry.worlds/}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'incomplete' /}
        {param label: 'Incomplete' /}
        {param value: $entry.incomplete /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.generic_value}
        {param label: 'Size' /}
        {param color: '#080' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {call dma.edit.field_selection}
                {param name: 'size' /}
                {param value: $entry.size.string /}
                {param choices: $ij.Size.names /}
                {param class: 'narrow' /}
              {/call}
              {call dma.edit.field_selection}
                {param name: 'size_modifier' /}
                {param value: $entry.size_modifier.string /}
                {param choices: $ij.SizeModifier.names /}
                {param class: 'narrow' /}              
              {/call}
            {/param}
          {/call}
        {/param}
      {/call}    
      {call dma.edit.value_selection}
        {param name: 'monster_type' /}
        {param label: 'Type' /}
        {param value: $entry.monster_type.string /}
        {param choices: $ij.MonsterType.names /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.generic_value}
        {param name: 'monster_subtype' /}
        {param label: 'Subtype' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $subtype in $entry.monster_subtypes}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'monster_subtype',
                    'value': $subtype.string,
                    'type': 'selection',
                    'choices': $ij.MonsterSubtype.names
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'monster_subtype',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.MonsterSubtype.names
                  ]] /}
                {/call}
              {/foreach}          
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'hit_dice' /}
        {param label: 'Hit Dice' /}
        {param value: $entry.hit_dice.present ? $entry.hit_dice : '' /}
        {param validate: 'dice' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'speed' /}
        {param label: 'Speed' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $speed in $entry.speeds}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'speed.mode',
                    'value': $speed.mode.string,
                    'type': 'selection',
                    'choices': $ij.MovementMode.names
                  ], [
                    'name': 'speed.speed',
                    'value': $speed.speed,
                    'validate': 'distance' 
                  ], [
                    'name': 'speed.maneuverability',
                    'value': $speed.maneuverability.string,
                    'type': 'selection',
                    'choices': $ij.Maneuverability.names
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'speed.mode',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.MovementMode.names
                  ], [
                    'name': 'speed.speed',
                    'value': '',
                    'validate': 'distance' 
                  ], [
                    'name': 'speed.maneuverability',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.Maneuverability.names
                  ]] /}
                {/call}
              {/foreach}          
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'natural_armor' /}
        {param label: 'Natural Armor' /}
        {param value: $entry.natural_armor.present 
          ? $entry.natural_armor : '' /}
        {param validate: 'modifier' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'attack' /}
        {param label: 'Base Attack Bonus' /}
        {param value: $entry.base_attack.present ? $entry.base_attack : '' /}
        {param validate: 'number' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.generic_value}
        {param label: 'Abilites' /}
        {param color: '#080' /}
        {param value kind="html"}
          {call dma.edit.field_input}
            {param name: 'strength' /}
            {param value: $entry.strength.present ? $entry.strength : '' /}
            {param validate: 'number' /}
            {param caption: 'Strength' /}
            {param class: 'field6' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'dexterity' /}
            {param value: $entry.dexterity.present ? $entry.dexterity : '' /}
            {param validate: 'number' /}
            {param caption: 'Dexterity' /}
            {param class: 'field6' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'constitution' /}
            {param value: $entry.constitution.present 
              ? $entry.constitution : '' /}
            {param validate: 'number' /}
            {param caption: 'Constitution' /}
            {param class: 'field6' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'intelligence' /}
            {param value: $entry.intelligence.present 
              ? $entry.intelligence : '' /}
            {param validate: 'number' /}
            {param caption: 'Intelligence' /}
            {param class: 'field6' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'wisdom' /}
            {param value: $entry.wisdom.present ? $entry.wisdom : '' /}
            {param validate: 'number' /}
            {param caption: 'Wisdom' /}
            {param class: 'field6' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'charisma' /}
            {param value: $entry.charisma.present ? $entry.charisma : '' /}
            {param validate: 'number' /}
            {param caption: 'Charisma' /}
            {param class: 'field6' /}
          {/call}
        {/param}
      {/call}    
      {call dma.edit.generic_value}
        {param label: 'Saves' /}
        {param color: '#080' /}
        {param value kind="html"}
          {call dma.edit.field_input}
            {param name: 'fortitude_save' /}
            {param value: $entry.fortitude_save.present
              ? $entry.fortitude_save : '' /}
            {param validate: 'number' /}
            {param caption: 'Fortitude' /}
            {param class: 'field3' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'reflex_save' /}
            {param value: $entry.reflex_save.present 
              ? $entry.reflex_save : '' /}
            {param validate: 'number' /}
            {param caption: 'Reflex' /}
            {param class: 'field3' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'will_save' /}
            {param value: $entry.will_save.present ? $entry.will_save : '' /}
            {param validate: 'number' /}
            {param caption: 'Will' /}
            {param class: 'field3' /}
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'primary_attack' /}
        {param label: 'Primary Attacks' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $attack in $entry.primary_attacks}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'primary_attack.number',
                    'value': $attack.number,
                    'validate': 'dice'
                  ], [
                    'name': 'primary_attack.mode',
                    'value': $attack.mode.string,
                    'type': 'selection',
                    'choices': $ij.AttackMode.names
                  ], [
                    'name': 'primary_attack.style',
                    'value': $attack.style.string,
                    'type': 'selection',
                    'choices': $ij.AttackStyle.names
                  ], [
                    'name': 'primary_attack.damage',
                    'value': $attack.damage,
                    'validate': 'damage'
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'primary_attack.number',
                    'value': '',
                    'validate': 'dice'
                  ], [
                    'name': 'primary_attack.mode',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.AttackMode.names
                  ], [
                    'name': 'primary_attack.style',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.AttackStyle.names
                  ], [
                    'name': 'primary_attack.damage',
                    'value': '',
                    'validate': 'damage'
                  ]] /}
                {/call}
              {/foreach}          
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.generic_value}
        {param name: 'secondary_attack' /}
        {param label: 'Secondary Attacks' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $attack in $entry.secondary_attacks}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'secondary_attack.number',
                    'value': $attack.number,
                    'validate': 'dice'
                  ], [
                    'name': 'secondary_attack.mode',
                    'value': $attack.mode.string,
                    'type': 'selection',
                    'choices': $ij.AttackMode.names
                  ], [
                    'name': 'secondary_attack.style',
                    'value': $attack.style.string,
                    'type': 'selection',
                    'choices': $ij.AttackStyle.names
                  ], [
                    'name': 'secondary_attack.damage',
                    'value': $attack.damage,
                    'validate': 'damage'
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'secondary_attack.number',
                    'value': '',
                    'validate': 'dice'
                  ], [
                    'name': 'secondary_attack.mode',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.AttackMode.names
                  ], [
                    'name': 'secondary_attack.style',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.AttackStyle.names
                  ], [
                    'name': 'secondary_attack.damage',
                    'value': '',
                    'validate': 'damage'
                  ]] /}
                {/call}
              {/foreach}          
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'space' /}
        {param label: 'Space' /}
        {param value: $entry.space.present ? $entry.space : '' /}
        {param validate: 'distance' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'reach' /}
        {param label: 'Reach' /}
        {param value: $entry.reach.present ? $entry.reach : '' /}
        {param validate: 'distance' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value_list}
        {param name: 'special_attack' /}
        {param label: 'Special Attacks' /}
        {param values: $entry.special_attacks /}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
        {param autocomplete: 'base quality/name' /}
      {/call}    
      {call dma.edit.value_list}
        {param name: 'special_quality' /}
        {param label: 'Special Qualities' /}
        {param values: $entry.special_qualities /}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
        {param autocomplete: 'base quality/name' /}
      {/call}    
      {call dma.edit.generic_value}
        {param label: 'Qualities' /}
        {param value kind="html"}
          {foreach $quality in $entry.qualities}
            {call dma.edit.field_list_line}
              {param field kind="html"}
                {call dma.entries.qualities.edit}
                  {param entry: $quality /}
                  {param index: index($quality) /}
                {/call}
              {/param}
              {param id: 'quality' /}
            {/call}
          {ifempty}
            {call dma.edit.field_list_line}
              {param field kind="html"}
                {call dma.entries.qualities.edit}
                  {param index: 0 /}
                {/call}
              {/param}
              {param id: 'quality' /}
            {/call}
          {/foreach}
        {/param}
        {param color: '#080' /}
      {/call}
      {call dma.edit.generic_value}
        {param label: 'Skills' /}
        {param value kind="html"}
          {foreach $skill in $entry.skills}
            {call dma.edit.field_list_line}
              {param id: 'skill' /}
              {param field kind="html"}
                {call dma.entries.skills.edit}
                  {param entry: $skill /}
                  {param index: index($skill) /}
                {/call}
              {/param}
            {/call}
          {ifempty}
            {call dma.edit.field_list_line}
              {param id: 'skill' /}
              {param field kind="html"}
                {call dma.entries.skills.edit}
                  {param index: 0 /}
                {/call}
              {/param}
            {/call}
          {/foreach}
        {/param}
        {param color: '#080' /}
      {/call}
      {call dma.edit.generic_value}
        {param label: 'Feats' /}
        {param value kind="html"}
          {foreach $feat in $entry.feats}
            {call dma.edit.field_list_line}
              {param id: 'feat' /}
              {param field kind="html"}
                {call dma.entries.feats.edit}
                  {param entry: $feat /}
                  {param index: index($feat) /}
                {/call}
              {/param}
            {/call}
          {ifempty}
            {call dma.edit.field_list_line}
              {param id: 'feat' /}
              {param field kind="html"}
                {call dma.entries.feats.edit}
                  {param index: 0 /}
                {/call}
              {/param}
            {/call}
          {/foreach}
        {/param}
        {param color: '#080' /}
      {/call}
      {call dma.edit.generic_value}
        {param label: 'Environment' /}
        {param color: '#080' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {call dma.edit.field_selection}
                {param name: 'climate' /}
                {param value: $entry.climate.string /}
                {param choices: $entry.climate.names /}
                {param class: 'narrow' /}
              {/call}
              {call dma.edit.field_selection}
                {param name: 'terrain' /}
                {param value: $entry.terrain.string /}
                {param choices: $entry.terrain.names /}
                {param class: 'narrow' /}              
              {/call}
            {/param}
          {/call}
        {/param}
      {/call}    
      {call dma.edit.generic_value}
        {param name: 'organization' /}
        {param label: 'Organization' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $group in $entry.organizations}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'organization.organization',
                    'value': $group.organization.string,
                    'type': 'selection',
                    'choices': $ij.Organization.names
                  ], [
                    'name': 'organization.number',
                    'value': $group.number,
                    'validate': 'dice',
                    'caption': 'number'
                  ], [
                    'name': 'organization.plus',
                    'value': $group.plus.present ? $group.plus : '',
                    'validate': 'any',
                    'caption': 'plus'
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'organization.organization',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.Organization.names
                  ], [
                    'name': 'organization.number',
                    'value': '',
                    'validate': 'dice',
                    'caption': 'number'
                  ], [
                    'name': 'organization.plus',
                    'value': '',
                    'validate': 'any',
                    'caption': 'plus'
                  ]] /}
                {/call}
              {/foreach}          
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'cr' /}
        {param label: 'CR' /}
        {param value: $entry.cr.present ? $entry.cr : '' /}
        {param validate: 'rational' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value_selection}
        {param name: 'treasure' /}
        {param label: 'Treasure' /}
        {param value: $entry.treasure.string /}
        {param choices: $entry.treasure.names /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.generic_value}
        {param label: 'Alignment' /}
        {param color: '#080' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {call dma.edit.field_selection}
                {param name: 'alignment_status' /}
                {param value: $entry.alignment_status.string /}
                {param choices: $entry.alignment_status.names /}
                {param class: 'narrow' /}
              {/call}
              {call dma.edit.field_selection}
                {param name: 'alignment' /}
                {param value: $entry.alignment.string /}
                {param choices: $entry.alignment.names /}
                {param class: 'narrow' /}              
              {/call}
            {/param}
          {/call}
        {/param}
      {/call}    
      {call dma.edit.generic_value}
        {param name: 'advancement' /}
        {param label: 'Advancement' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $advancement in $entry.advancements}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'advancement.range',
                    'value': $advancement.range,
                    'validate': 'distance'
                  ], [
                    'name': 'advancement.size',
                    'value': lower($advancement.size),
                    'type': 'selection',
                    'choices': $ij.Size.names
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'advancement.range',
                    'value': '',
                    'validate': 'distance'
                  ], [
                    'name': 'advancement.size',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.Size.names
                  ]] /}
                {/call}
              {/foreach}          
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'level_adjustment' /}
        {param label: 'Level Adjustment' /}
        {param value: $entry.level_adjustment.present 
          ? $entry.level_adjustment : '' /}
        {param validate: 'number' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.generic_value}
        {param name: 'language' /}
        {param label: 'Language' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $language in $entry.languages}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'language.language',
                    'value': $language.language.string,
                    'type': 'selection',
                    'choices': $ij.Language.names
                  ], [
                    'name': 'language.modifier',
                    'value': $language.modifier.string,
                    'type': 'selection',
                    'choices': $ij.LanguageModifier.names
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'language.language',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.Language.names
                  ], [
                    'name': 'language.modifier',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.LanguageModifier.names
                  ]] /}
                {/call}
              {/foreach}
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value_list}
        {param name: 'proficiency' /}
        {param label: 'Proficiencies' /}
        {param values: $entry.proficiencies /}
        {param validate: 'non-empty' /}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.value_text}
        {param name: 'encounter' /}
        {param label: 'Encounter' /}
        {param value: $entry.encounter.present ? $entry.encounter : '' /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.value_text}
        {param name: 'combat' /}
        {param label: 'Combat' /}
        {param value: $entry.combat.present ? $entry.combat : '' /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.value_text}
        {param name: 'tacticts' /}
        {param label: 'Tactics' /}
        {param value: $entry.tactics.present ? $entry.tactics : '' /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.value_text}
        {param name: 'character' /}
        {param label: 'Character' /}
        {param value: $entry.character.present ? $entry.character : '' /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.value_text}
        {param name: 'reproduction' /}
        {param label: 'Reproduction' /}
        {param value: $entry.reproduction.present 
          ? $entry.reproduction : '' /}
        {param validate: 'any' /}
        {param color: '#080' /}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'possession' /}
        {param label: 'Possessions' /}
        {param color: '#080' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $possession in $entry.possessions}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'possession.count',
                    'value': $possession.count.string,
                    'validate': 'dice',
                    'caption': 'count'
                  ], [
                    'name': 'possession.name',
                    'value': $possession.name,
                    'validate': 'non-empty',
                    'autocomplete': 'base item/name',
                    'caption': 'item'
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'possession.count',
                    'value': '',
                    'validate': 'dice'
                  ], [
                    'name': 'possession.name',
                    'value': '',
                    'validate': 'non=empty',
                    'autocomplete': 'base item/name'
                  ]] /}
                {/call}
              {/foreach}
            {/param}
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'good_saves' /}
        {param label: 'Good Saves' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $save in $entry.good_saves}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'good_save',
                    'value': $save.string,
                    'type': 'selection',
                    'choices': $ij.Save.names
                  ]] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [[
                    'name': 'good_save',
                    'value': '',
                    'type': 'selection',
                    'choices': $ij.Save.names
                  ]] /}
                {/call}
              {/foreach}          
            {/param}
          {/call}
        {/param}
        {param color: '#080' /}
      {/call}    
      {call dma.edit.generic_value}
        {param name: 'references' /}
        {param color: '#080' /}
        {param label: 'References' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $reference in $entry.references}  
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'references.name',
                      'value': $reference.name,
                      'validate': 'non-empty',
                      'caption': 'name' 
                    ],
                    [
                      'name': 'references.pages',
                      'value': $reference.pagesString,
                      'validate': 'any',
                      'caption': 'pages' 
                    ]
                  ] 
                  /}
                {/call}          
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'references.name',
                      'value': '',
                      'validate': 'non-empty',
                      'caption': 'name' 
                    ],
                    [
                      'name': 'references.pages',
                      'value': '',
                      'validate': 'any',
                      'caption': 'pages' 
                    ]
                  ] 
                  /}
                {/call}          
              {/foreach}
            {/param}
          {/call}
        {/param}            
      {/call}
    {/param}
  {/call}
{/template}

/** A monsters size and type. */
{template .size_and_type}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param content kind="html"}
      <b>
        {annotate($entry.combined_size)}{sp}
        {annotate($entry.combined_monster_type)}
        {if length($entry.combined_monster_subtypes.get) > 0}
          ({foreach $type in $entry.combined_monster_subtypes.get}
            {$type}{if not isLast($type)}, {/if}
          {/foreach})
        {/if}
      </b>
    {/param}
  {/call}
{/template}

/** A monsters hit dice. */
{template .hit_die}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Hit Dice' /}
    {param content kind="html"}
      {$entry.total_hit_die}
      {if not $entry.base}
        {sp}({$entry.HP} of {$entry.max_HP} hp)
      {/if}
    {/param}
  {/call}

{/template}

/** A monsters initiative. */
{template .initiative}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Initiative' /}
    {param content kind="html"}
      {if $entry.initiative >= 0}+{/if}{$entry.initiative}
    {/param}
  {/call}
{/template}

/** A monsters speed. */
{template .speed}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Speed' /}
    {param content kind="html"}
      {foreach $speed in $entry.combined_speeds}
        {annotate($speed)} ({$speed.get.squares} squares)
        {if not isLast($speed)}, {/if}
      {/foreach}
    {/param}
  {/call}
{/template}

/** A monsters armor class. */
{template .armor_class}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Armor Class' /}
    {param content kind="html"}
      {$entry.armor_class.total_modifier} ({$entry.armor_class}),
      touch {$entry.armor_class_touch.total_modifier},
      flat-footed {$entry.armor_class_flatfooted.total_modifier}
    {/param}
  {/call}
{/template}

/** A monsters base attack and grapple values. */
{template .base_attack_grapple}
  {@param entry: ?}
 
  {call dma.entry.stat_line}
    {param label: 'Base Attack/Grapple' /}
    {param content kind="html"}
      {bonus($entry.combined_base_attack.get)}/
      {bonus($entry.grapple_bonus)}
    {/param}
  {/call}
{/template}

/** A monsters attack values. */
{template .attack}
  {@param entry: ?}
 
  {call dma.entry.stat_line}
    {param label: 'Attack' /}
    {param content kind="html"}
      {if length($entry.combined_primary_attacks.get) > 0}
        {call .attacks}
          {param entry: $entry /}
          {param attacks: $entry.combined_primary_attacks.get /}
        {/call}
      {else}
        {call .attacks}
          {param entry: $entry /}
            {param attacks: $entry.combined_secondary_attacks.get /}
            {param secondary: true /}
        {/call}
      {/if}
    {/param}
  {/call}
{/template}

/** A monsters full attack values. */
{template .full_attack}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Full Attack' /}
    {param content kind="html"}
      {call .attacks}
        {param entry: $entry /}
        {param attacks: $entry.combined_primary_attacks.get /}
        {param full: true /}
      {/call}
      {if length($entry.combined_secondary_attacks.get) > 0
          and length($entry.combined_primary_attacks.get) > 0}
        {sp}and{sp}
      {/if}
      {call .attacks}
        {param entry: $entry /}
        {param attacks: $entry.combined_secondary_attacks.get /}
        {param secondary: true /}
        {param full: true /}
      {/call}
    {/param}
  {/call}
{/template}

/** A template for a monster's qualities. */
{template .qualities}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Qualities' /}
    {param content kind="html"}
      {foreach $quality in $entry.combined_qualities.get}
        {call dma.entries.qualities.summary}
          {param entry: $quality /}
        {/call}
        ;{sp}
      {/foreach}
    {/param}
  {/call}
{/template}

/** A template for space and reach. */
{template .space_reach}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Space/Reach' /}
    {param content kind="html"}
      {annotate($entry.combined_space)}/{annotate($entry.combined_reach)}
    {/param}
  {/call}
{/template}

/** A template for a monster's saves. */
{template .saves}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Saves' /}
    {param content kind="html"}
       Fort {bonus($entry.combined_fortitude_save.get)},{sp}
       Ref {bonus($entry.combined_reflex_save.get)},{sp}
       Will {bonus($entry.combined_will_save.get)}
    {/param}
  {/call}
{/template}

/** A template for a monster's abilities. */
{template .abilities}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Abilities' /}
    {param content kind="html"}
      Str {annotate($entry.combined_strength)}{sp}
      ({bonus($entry.strength_bonus)}),{sp}
      Dex {annotate($entry.combined_dexterity)}{sp}
      ({bonus($entry.dexterity_bonus)}),{sp}
      Con {annotate($entry.combined_constitution)}{sp}
      ({bonus($entry.constitution_bonus)}),{sp}
      Int {annotate($entry.combined_intelligence)}{sp}
      ({bonus($entry.intelligence_bonus)}),{sp}
      Wis {annotate($entry.combined_wisdom)}{sp}
      ({bonus($entry.wisdom_bonus)}),{sp}
      Cha {annotate($entry.combined_charisma)}{sp}
      ({bonus($entry.charisma_bonus)}),{sp}
    {/param}
  {/call}
{/template}

/** A template for a monster's skills. */
{template .skills}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Skills' /}
    {param content kind="html"}
      {foreach $skill in $entry.combined_skills.get}
        {call dma.entries.skills.show}
          {param entry: $skill /}
          {param monster: $entry /}
        {/call}
        {if not isLast($skill)}, {/if}
      {/foreach}
      {if $entry.skill_points != $entry.skill_points_used}
        <span class="warning">
          {sp}(used {$entry.skill_points_used} of {$entry.skill_points})
        </span>
      {/if}
    {/param}
  {/call}
{/template}

/** A template for a monster's feats. */
{template .feats}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Feats' /}
    {param content kind="html"}
      {foreach $feat in $entry.combined_feats.get}
        {call dma.entries.feats.summary}
          {param entry: $feat /}
          {param monster: $entry /}
        {/call}
             {if not isLast($feat)}, {/if}
           {/foreach}
    {/param}
  {/call}
{/template}

/** A template for a monster's environment. */
{template .environment}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Environment' /}
    {param content kind="html"}
      {annotate($entry.combined_terrain)},
      {annotate($entry.combined_climate)}
    {/param}
  {/call}
{/template}

/** A template for a monster's organization. */
{template .organization}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Organization' /}
    {param content kind="html"}
      {foreach $organization in $entry.combined_organizations.get}
        {$organization.organization}
        {if not $organization.number.zero
            and not $organization.number.one}
          {sp}(
           {if $organization.number.random}
             {$organization.number.min} - {$organization.number.max}
           {else}
             {$organization.number}
           {/if}
           {if $organization.plus.present} plus {$organization.plus}{/if}
          )
        {/if}
        {if not isLast($organization)}, {/if}
      {/foreach}
    {/param}
  {/call}
{/template}

/** A template for a monster's challenge rating. */
{template .challenge_rating}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Challenge Rating' /}
    {param content kind="html"}
      {annotate($entry.combined_cr)}
    {/param}
  {/call}
{/template}

/** A template for a monster's treasure. */
{template .treasure}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Treasure' /}
    {param content kind="html"}
      {annotate($entry.combined_treasure)}
    {/param}
  {/call}
{/template}

/** A template for a monster's alignment. */
{template .alignment}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Alignment' /}
    {param content kind="html"}
      {annotate($entry.combined_alignment_status)}{sp}
      {annotate($entry.combined_alignment)}
    {/param}
  {/call}
{/template}

/** A template for a monster's advancement. */
{template .advancement}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Advancement' /}
    {param content kind="html"}
      {annotate($entry.combined_advancements)}
    {/param}
  {/call}
{/template}

/** A template for a monster's level adjustment. */
{template .level_adjustment}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Level Adjustment' /}
    {param content kind="html"}
      {annotate($entry.combined_level_adjustment)}
    {/param}
  {/call}
{/template}

/** A template for a monster's synonyms. */
{template .synonyms}
  {@param entry: ?}

  {if length($entry.synonyms)}
    {call dma.entry.stat_line}
      {param label: 'Synonyms' /}
      {param content kind="html"}
        {foreach $synonym in $entry.synonyms}
          {$synonym}
          {if not isLast($synonym)}; {/if}
        {/foreach}
      {/param}
    {/call}
  {/if}
{/template}

/** A template for a monster's categories. */
{template .categories}
  {@param entry: ?}

  {if length($entry.categories) or length($entry.combined_categories.get)}
    {call dma.entry.stat_line}
      {param label: 'Categories' /}
      {param content kind="html"}
        {if length($entry.categories)}
          {foreach $category in $entry.categories}
            {$category}
            {if not isLast($category)}, {/if}
          {/foreach}
        {/if}
        {if length($entry.combined_categories.get)}
          {if length($entry.categories)},{sp}{/if}
          {annotate($entry.combined_categories)}
        {/if}
      {/param}
    {/call}
  {/if}
{/template}

/** A template for a monster's worlds. */
{template .worlds}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Worlds' /}
    {param content kind="html"}
      {annotate($entry.combined_worlds)}
    {/param}
  {/call}
{/template}

/** A template for a monster's incomplete value. */
{template .incomplete}
  {@param entry: ?}

  {if $entry.incomplete}
    {call dma.entry.stat_line}
      {param label: 'Incomplete' /}
      {param content kind="html"}
        {annotate($entry.combined_incomplete)}
      {/param}
    {/call}
  {/if}
{/template}

/** A template for a monster's languages. */
{template .languages}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Languages' /}
    {param content kind="html"}
      {annotate($entry.combined_languages)}
    {/param}
  {/call}
{/template}

/** A template for a monster's proficiencies. */
{template .proficiencies}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Proficiencies' /}
    {param content kind="html"}
      {annotate($entry.combined_proficiencies)}
    {/param}
  {/call}
{/template}

/** A template for a monster's possesions. */
{template .possessions}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Possesions' /}
    {param content kind="html"}
      {annotate($entry.combined_possessions)}
    {/param}
  {/call}
{/template}

/** A template for a monster's reference. */
{template .reference}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: 'Reference' /}
    {param content kind="html"}
      {annotate($entry.combined_references)}
    {/param}
  {/call}
{/template}

/** A template for a monster's encounter description. */
{template .encounter}
  {@param entry: ?}

  {call dma.entry.stat_paragraph}
    {param content kind="html"}
      <i>{commands(annotate($entry.combined_encounter))}</i>
    {/param}
  {/call}
{/template}

/** A template for a monster's description. */
{template .description}
  {@param entry: ?}

  {call dma.entry.stat_paragraph}
    {param content kind="html"}
      {commands(annotate($entry.combined_description))}
    {/param}
  {/call}
{/template}

/** A template for a monster's combat description. */
{template .combat}
  {@param entry: ?}

  {if $entry.combined_combat.get.present}
    {call dma.entry.stat_paragraph}
      {param title: 'Combat' /}
      {param content kind="html"}
         {commands(annotate($entry.combined_combat))}
      {/param}
    {/call}
  {/if}
{/template}

/** A template for a monster's tactics description. */
{template .tactics}
  {@param entry: ?}

  {if $entry.combined_tactics.get.present}
    {call dma.entry.stat_paragraph}
      {param title: 'Tactics' /}
      {param content kind="html"}
        {commands(annotate($entry.combined_tactics))}
      {/param}
    {/call}
  {/if}
{/template}

/** A template for a monster's character description. */
{template .character}
  {@param entry: ?}

  {if $entry.combined_character.get.present}
    {call dma.entry.stat_paragraph}
      {param title: 'Character' /}
      {param content kind="html"}
        {commands(annotate($entry.combined_character))}
      {/param}
    {/call}
  {/if}
{/template}

/** A template for a monster's reproduction description. */
{template .reproduction}
  {@param entry: ?}

  {if $entry.combined_reproduction.get.present}
    {call dma.entry.stat_paragraph}
      {param title: 'Reproduction' /}
      {param content kind="html"}
        {commands(annotate($entry.combined_reproduction))}
      {/param}
    {/call}
  {/if}
{/template}


/*
/** A template for a monster's . *
{template .}
  {@param? title: string|html}
  {@param entry: ?}

  {call dma.entry.stat_line}
    {param label: '' /}
    {param content kind="html"}
    {/param}
  {/call}
{/template}
*/