/* ****************************************************************************
 * Copyright (C) 2002-2014 Peter 'Merlin' Balsiger And Fred 'Mythos' Dobler
 * All Rights Reserved
 *
 * This File Is Part Of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant Is Free Software; You Can Redistribute It And/Or
 * Modify It Under The Terms Of The Gnu General Public License As Published By
 * The Free Software Foundation; Either Version 2 Of The License, Or
 * (At Your Option) Any Later Version.
 *
 * Dungeon Master Assistant Is Distributed In The Hope That It Will Be Useful,
 * But Without Any Warranty; Without Even The Implied Warranty Of
 * Merchantability Or Fitness For A Particular Purpose.  See The
 * Gnu General Public License For More Details.
 *
 * You Should Have Received A Copy Of The Gnu General Public License
 * Along With Dungeon Master Assistant; If Not, Write To The Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, Ma  02111-1307  Usa
 *****************************************************************************/

 /*
 * Templates for base products.
 */
{namespace dma.entries.basefeats}

/**
 * Show the given entry in standard format.
 * 
 * @param entry The entry to show.
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 */
{template .show}
  {call dma.entry.show}
    {param entry: $entry /}
    {param type: 'base-level' /}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
    {param color: '#0aa' /}
    {param title kind="html"}
      {call dma.entry.title}
        {param title: $entry.name /}
        {param color: '#0aa' /}
      {/call}
    {/param}
    {param values kind="html"}
      {if length($entry.baseNames)}
        {call dma.entry.value}
          {param label: 'Base' /}
          {param value kind="html"}
            {foreach $base in $entry.baseNames}
              {call dma.page.link}
                {param text: $base /}
                {param url: '/quality/'  + $base /}
              {/call}
              {if not isLast($base)}; {/if}
            {/foreach}
          {/param}
          {param color: '#0aa' /}
        {/call} 
      {/if}      
      {if length($entry.synonyms)}
        {call dma.entry.value}
          {param label: 'Synonyms' /}
          {param value kind="html"}
            {foreach $synonym in $entry.synonyms}
              {$synonym}
              {if not isLast($synonym)}; {/if}
            {/foreach}
          {/param}
          {param color: '#0aa' /}
        {/call}
      {/if}      
      {if length($entry.categories) or 
          length($entry.combined_categories.get)}
        {call dma.entry.value}
          {param label: 'Categories' /}
          {param value kind="html"}
            {if length($entry.categories)}
              {foreach $category in $entry.categories}
                {$category}
                {if not isLast($category)}, {/if}
              {/foreach}
            {/if}
            {if length($entry.combined_categories.get)}
              {if length($entry.categories)},{sp}{/if}
              {annotate($entry.combined_categories)}
            {/if}
          {/param}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {call dma.entry.value}
        {param label: 'Worlds' /}        
        {param value: annotate($entry.combined_worlds) /}
        {param color: '#0aa' /}
      {/call}
      {if $entry.incomplete}
        {call dma.entry.value}
          {param label: 'Incomplete' /}
          {param value kind="html"}
            {if $entry.incomplete}
              {$entry.incomplete}{sp}
            {/if}
            {annotate($entry.combined_incomplete)}
          {/param}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {call dma.entry.value}
        {param label: 'Type' /}
        {param value: $entry.feat_type /}
        {param color: '#0aa' /}
      {/call}
      {if $entry.benefit.present}
        {call dma.entry.value}
          {param label: 'Benefit' /}
          {param value: commands($entry.benefit.get) /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.special.present}
        {call dma.entry.value}
          {param label: 'Special' /}
          {param value: commands($entry.special.get) /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.normal.present}
        {call dma.entry.value}
          {param label: 'Normal' /}
          {param value: commands($entry.normal.get) /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.prerequisites.present}
        {call dma.entry.value}
          {param label: 'Prerequisites' /}
          {param value: $entry.prerequisites.get /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.attack_modifier.present}
        {call dma.entry.value}
          {param label: 'Attack' /}
          {param value: $entry.attack_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.damage_modifier.present}
        {call dma.entry.value}
          {param label: 'Damage' /}
          {param value: $entry.damage_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.additional_attacks.present}
        {call dma.entry.value}
          {param label: 'Additional Attacks' /}
          {param value: $entry.additional_attacks /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.initiative_modifier.present}
        {call dma.entry.value}
          {param label: 'Initiative' /}
          {param value: $entry.initiative_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.condition.present}
        {call dma.entry.value}
          {param label: 'Condition' /}
          {param value: $entry.condition /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.skill_modifiers}
        {call dma.entry.value}
          {param label: 'Skills' /}
          {param value kind="html"}
            {foreach $skill in $entry.skill_modifiers}
              {$skill.name} {$skill.modifier}
              {if not isLast($skill)}; {/if}
            {/foreach}
          {/param}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.strength_modifier.present}
        {call dma.entry.value}
          {param label: 'Str Modifier' /}
          {param value: $entry.strength_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.dexterity_modifier.present}
        {call dma.entry.value}
          {param label: 'Dex Modifier' /}
          {param value: $entry.dexterity_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.constitution_modifier.present}
        {call dma.entry.value}
          {param label: 'Con Modifier' /}
          {param value: $entry.constitution_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.intelligence_modifier.present}
        {call dma.entry.value}
          {param label: 'Int Modifier' /}
          {param value: $entry.intelligence_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.wisdom_modifier.present}
        {call dma.entry.value}
          {param label: 'Wis Modifier' /}
          {param value: $entry.wisdom_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.charisma_modifier.present}
        {call dma.entry.value}
          {param label: 'Cha Modifier' /}
          {param value: $entry.charisma_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.fortitude_modifier.present}
        {call dma.entry.value}
          {param label: 'For Modifier' /}
          {param value: $entry.fortitude_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.will_modifier.present}
        {call dma.entry.value}
          {param label: 'Will Modifier' /}
          {param value: $entry.will_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.reflex_modifier.present}
        {call dma.entry.value}
          {param label: 'Ref Modifier' /}
          {param value: $entry.reflex_modifier /}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {if $entry.effects}
        {call dma.entry.value}
          {param label: 'Effects' /}
          {param value kind="html"}
            {foreach $effect in $entry.effects}
              {$effect}
              {if not isLast($effect)}; {/if}
            {/foreach}
          {/param}
          {param color: '#0aa' /}
        {/call}
      {/if}
      {call dma.entry.value}
        {param label: 'References' /}
        {param value: annotate($entry.combined_references) /}
        {param color: '#0aa' /}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * Formatting a list of entries.
 *
 * @param title The list title.
 * @param start The start index
 * @param pagesize The size of the page
 * @param entries The entries printed
 * @param label The navigation label for this page
 * @param path The path to this page
 *
 */
{template .list}
  {call dma.entry.list}
    {param title: $title /}
    {param label: $label /}
    {param path: $path /}
    {param start: $start /}
    {param pagesize: $pagesize /}
    {param size: $entries ? length($entries) : 0 /}
    {param titles: [ 'Name', 'Worlds', 'Short Descriptoion'] /}
    {param entries kind="html"}
      {foreach $entry in $entries}
        <tr onclick="util.link(event, '{$entry.path}')">
          {call dma.entry.listEntry}
            {param path: $entry.path /}
            {param values: [
              $entry.name, $entry.worldsString, $entry.short_description
            ] /}
          {/call}
        </tr>
      {/foreach}
    {/param}
  {/call}
{/template}

/**
 * Editiing the base item.
 * 
 * @param entry   The item to edit. 
 * @param id      The id to use for the editing dialog.
 * @param create  Whether to create a new entry
 */
{template .edit}
  {call dma.edit.entry}
    {param entry: $entry /}
    {param type: 'base-level' /}
    {param id: $id /}
    {param create: $create /}
    {param values kind="html"}
      {call dma.edit.value}
        {param name: 'name' /}
        {param label: 'Name' /}
        {param value: $entry.name /}
        {param validate: 'non-empty' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value_text}
        {param name: 'description' /}
        {param label: 'Description' /}
        {param value: $entry.description /}
        {param validate: 'any' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'short_description' /}
        {param label: 'Short Description' /}
        {param value: $entry.short_description /}
        {param validate: 'any' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'base' /}
        {param label: 'Base' /}
        {param values: $entry.base_names /}
        {param validate: 'non-empty' /}
        {param color: '#0aa' /}
        {param autocomplete: 'base item/name' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'synonyms' /}
        {param label: 'Synonyms' /}
        {param values: $entry.synonyms /}
        {param validate: 'non-empty' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value_list}
        {param name: 'categories' /}
        {param label: 'Categories' /}
        {param values: $entry.categories /}
        {param validate: 'non-empty' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'worlds' /}
        {param label: 'Worlds' /}
        {param values: $entry.worlds/}
        {param validate: 'non-empty' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'incomplete' /}
        {param label: 'Incomplete' /}
        {param value: $entry.incomplete /}
        {param validate: 'any' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value_selection}
        {param name: 'feat_type' /}
        {param label: 'Type' /}
        {param value: $entry.feat_type.string /}
        {param choices: $entry.feat_type.names /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value_text}
        {param name: 'benefit' /}
        {param label: 'Benefit' /}
        {param value: $entry.benefit.present ? $entry.benefit.get : '' /}
        {param validate: 'any' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value_text}
        {param name: 'special' /}
        {param label: 'Special' /}
        {param value: $entry.special.present ? $entry.special.get : '' /}
        {param validate: 'any' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value_text}
        {param name: 'normal' /}
        {param label: 'Normal' /}
        {param value: $entry.normal.present ? $entry.normal.get : '' /}
        {param validate: 'any' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'prerequisites' /}
        {param label: 'Prerequisites' /}
        {param value: $entry.prerequisites.present ? $entry.prerequisites.get : '' /}
        {param validate: 'any' /}
        {param color: '#0aa' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'attack_modifier' /}
        {param label: 'Attack' /}
        {param value: $entry.attack_modifier.present
          ? $entry.attack_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'damage_modifier' /}
        {param label: 'Damage' /}
        {param value: $entry.damage_modifier.present
          ? $entry.damage_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'additional_attacks' /}
        {param label: 'Additional Attacks' /}
        {param value: $entry.additional_attacks.present
          ? $entry.additional_attacks : '' /}
        {param validate: 'number' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'initiative_modifier' /}
        {param label: 'Initiative' /}
        {param value: $entry.initiative_modifier.present
          ? $entry.initiative_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.generic_value}
        {param label: 'Condition' /}
        {param value kind="html"}
          {call dma.edit.field_input}
            {param name: 'condition.generic' /}
            {param validate: 'any' /}
            {param caption: 'condition' /}
            {param value: $entry.condition.isPresent
              ? $entry.condition.get.generic : '' /}
          {/call}
          {call dma.edit.field_selection}
            {param name: 'condition.weapon_style' /}
            {param choices:  $ij.WeaponStyle.names /}
            {param value: $entry.condition.isPresent
              ? $entry.condition.wepon_style.get.string : '' /}
          {/call}
        {/param}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'strength_modifier' /}
        {param label: 'Str Modifier' /}
        {param value: $entry.strength_modifier.present
          ? $entry.strength_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'dexterity_modifier' /}
        {param label: 'Dex Modifier' /}
        {param value: $entry.dexterity_modifier.present
          ? $entry.dexterity_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'constitution_modifier' /}
        {param label: 'Con Modifier' /}
        {param value: $entry.constitution_modifier.present
          ? $entry.constitution_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'intelligence_modifier' /}
        {param label: 'Int Modifier' /}
        {param value: $entry.intelligence_modifier.present
          ? $entry.intelligence_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'wisdom_modifier' /}
        {param label: 'Wis Modifier' /}
        {param value: $entry.wisdom_modifier.present
          ? $entry.wisdom_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'charisma_modifier' /}
        {param label: 'Cha Modifier' /}
        {param value: $entry.charisma_modifier.present
          ? $entry.charisma_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'fortitude_modifier' /}
        {param label: 'For Modifier' /}
        {param value: $entry.fortitude_modifier.present
          ? $entry.fortitude_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'will_modifier' /}
        {param label: 'Will Modifier' /}
        {param value: $entry.will_modifier.present
          ? $entry.will_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.value}
        {param name: 'reflex_modifier' /}
        {param label: 'Ref Modifier' /}
        {param value: $entry.reflex_modifier.present
          ? $entry.reflex_modifier : '' /}
        {param validate: 'modifier' /}
        {param color: '#0aa' /}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'effect' /}
        {param color: '#0aa' /}
        {param label: 'Effects' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $effect in $entry.effects}
                {call dma.edit.field_list_multiple}
                  {param class: 'narrow' /}
                  {param values: [
                    [
                      'name': 'effect.affects',
                      'value': $effect.affects.string,
                      'type': 'selection',
                      'choices': $effect.affects.names,
                      'caption': 'affects'
                    ],
                    [
                      'name': 'effect.name',
                      'value': $effect.name.present ? $effect.name.get : '',
                      'validate': 'any',
                      'caption': 'name'
                    ],
                    [
                      'name': 'effect.modifier',
                      'value': $effect.modifier.present
                        ? $effect.modifier.get : '',
                      'validate': 'modifier',
                      'caption': 'modifier'
                    ],
                    [
                      'name': 'effect.text',
                      'value': $effect.text.present ? $effect.text.get : '',
                      'validate': 'any',
                      'caption': 'text'
                    ]
                  ] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param class: 'narrow' /}
                  {param values: [
                    [
                      'name': 'effect.affects',
                      'value': '',
                      'type': 'selection',
                      'choices': $ij.Affects.names,
                      'caption': 'affects'
                    ],
                    [
                      'name': 'effect.name',
                      'value': '',
                      'validate': 'any',
                      'caption': 'name'
                    ],
                    [
                      'name': 'effect.modifier',
                      'value': '',
                      'validate': 'modifier',
                      'caption': 'modifier'
                    ],
                    [
                      'name': 'effect.text',
                      'value': '',
                      'validate': 'any',
                      'caption': 'text'
                    ]
                  ] /}
                {/call}
              {/foreach}
            {/param}
          {/call}
        {/param}
        {param validate: 'non-empty' /}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'skill' /}
        {param color: '#0aa' /}
        {param label: 'Skills' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $skill in $entry.skill_modifiers}
                {call dma.edit.field_list_multiple}
                  {param class: 'narrow' /}
                  {param values: [
                    [
                      'name': 'skill.name',
                      'value': $skill.name,
                      'validate': 'any',
                      'autocomplete': 'base skill/name',
                      'caption': 'name'
                    ],
                    [
                      'name': 'skill.modifier',
                      'value': $skill.modifier,
                      'validate': 'modifier',
                      'caption': 'modifier'
                    ]
                  ] /}
                {/call}
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param class: 'narrow' /}
                  {param values: [
                    [
                      'name': 'skill.name',
                      'value': '',
                      'validate': 'any',
                      'autocomplete': 'base skill/name',
                      'caption': 'name'
                    ],
                    [
                      'name': 'skill.modifier',
                      'value': '',
                      'validate': 'modifier',
                      'caption': 'modifier'
                    ]
                  ] /}
                {/call}
              {/foreach}
            {/param}
          {/call}
        {/param}
        {param validate: 'non-empty' /}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'references' /}
        {param color: '#0aa' /}
        {param label: 'References' /}
        {param value kind="html"}
          {call dma.edit.field}
            {param markup kind="html"}
              {foreach $reference in $entry.references}  
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'references.name',
                      'value': $reference.name,
                      'validate': 'non-empty',
                      'caption': 'name' 
                    ],
                    [
                      'name': 'references.pages',
                      'value': $reference.pagesString,
                      'validate': 'any',
                      'caption': 'pages' 
                    ]
                  ] 
                  /}
                {/call}          
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'references.name',
                      'value': '',
                      'validate': 'non-empty',
                      'caption': 'name' 
                    ],
                    [
                      'name': 'references.pages',
                      'value': '',
                      'validate': 'any',
                      'caption': 'pages' 
                    ]
                  ] 
                  /}
                {/call}          
              {/foreach}
            {/param}
          {/call}
        {/param}            
      {/call}
    {/param}
  {/call}
{/template}

