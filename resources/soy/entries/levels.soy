u/* ****************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/*
 * Templates for levels.
 */
{namespace dma.entries.levels}

/** Editing the base level. */
{template .edit}
  {@param? entry: ?}
  {@param constitutionModifier: number}
  {@param index: number}
  {call dma.edit.field_selection}
    {param name: 'level@' + $index + '.name' /}
    {param caption: 'Name' /}
    {param value: $entry ? $entry.name : '' /}
    {param choices: $ij.Level.available_levels /}
    {param secondaries: $ij.Level.available_level_hit_dice /}
    {param class: 'narrow' /}
  {/call}
  {call dma.edit.field_input}
    {param name: 'level@' + $index + '.hp' /}
    {param caption: 'HP' /}
    {param value: $entry ? $entry.HP : '' /}
    {param validate: 'number' /}
    {param width: '25%' /}
  {/call}
  <div class="sprite large random" tooltip="random name"
       onclick="$('input[name=level\\@{$index}\\.hp]').val(
         edit.roll(1,
                   $('select[name=level\\@{$index}\\.name]').find(':selected')
                     .attr('secondary'),
                  {$constitutionModifier}));">
  </div>
  {if $entry and length($entry.qualities)}
    {foreach $quality in $entry.qualities}
      {call dma.edit.field_list_line}
        {param id: 'quality' /}
        {param field kind="html"}
          {call dma.entries.qualities.edit}
            {param entry: $quality /}
            {param prefix: 'level@' + $index + '.' /}
            {param index: index($quality) /}
          {/call}
        {/param}
      {/call}
    {/foreach}
  {else}
    {call dma.edit.field_list_line}
      {param id: 'quality' /}
      {param field kind="html"}
        {call dma.entries.qualities.edit}
          {param prefix: 'level@' + $index + '.' /}
          {param index: 0 /}
        {/call}
      {/param}
    {/call}
  {/if}
  {if $entry and length($entry.feats)}
    {foreach $feat in $entry.feats}
      {call dma.edit.field_list_line}
        {param id: 'feat' /}
        {param field kind="html"}
          {call dma.entries.feats.edit}
            {param entry: $feat /}
            {param prefix: 'level@' + $index + '.' /}
            {param index: index($feat) /}
          {/call}
        {/param}
      {/call}
    {/foreach}
  {else}
    {call dma.edit.field_list_line}
      {param id: 'feat' /}
      {param field kind="html"}
        {call dma.entries.feats.edit}
          {param prefix: 'level@' + $index + '.' /}
          {param index: 0 /}
        {/call}
      {/param}
    {/call}
  {/if}
  {call dma.edit.field_selection}
    {param name: 'level@' + $index + '.ability_increase' /}
    {param caption: 'Ability Increase' /}
    {param value: $entry ? $entry.ability_increase.string : '' /}
    {param choices: $ij.Ability.names /}
    {param class: 'narrow' /}
  {/call}
  {if $entry and length($entry.spells_known)}
    {foreach $spell in $entry.spells_known}
      {call dma.edit.field_list_line}
        {param id: 'spells_known' /}
        {param field kind="html"}
          {call dma.edit.field_input}
            {param name: 'level@' + $index + '.spell_known' /}
            {param caption: 'spell known' /}
            {param value: $spell /}
            {param validate: 'any' /}
            {param autocomplete: 'base spell/name' /}
          {/call}
        {/param}
      {/call}
    {/foreach}
  {else}
    {call dma.edit.field_list_line}
      {param id: 'spells_known' /}
      {param field kind="html"}
        {call dma.edit.field_input}
          {param name: 'level@' + $index + '.spell_known' /}
          {param caption: 'spell known' /}
          {param value: '' /}
          {param validate: 'any' /}
          {param autocomplete: 'base spell/name' /}
        {/call}
      {/param}
    {/call}
  {/if}
{/template}

/**
 * The tiny item card.
 *
 * @param entry      The entry rendered.
 */
{template .tiny}
  <div class="entry level tiny" onclick="details('{$entry.path}')">
    {$entry.abbreviation}
  </div>
{/template}

/**
 * The small item card.
 *
 * @param entry The entry rendered.
 */
{template .small}
  <div class="entry item card small">
    <div class="header" style="background-color: #008">
      <div class="actions">
        <div class="sprite white delete" title="permanently delete this"></div>
      </div>

      <div class="title">
        {if $ij.isDM}
          {$entry.DM_name}
          {if $entry.player_name and $entry.DM_name != $entry.player_name}
            {sp}[{$entry.player_name}]
          {/if}
        {else}
          {$entry.player_name}
        {/if}
        {sp}({$entry.name})
        {if $ij.isDM and $entry.DM_name != $entry.player_name}
          <br /><span class="subtitle">{$entry.player_name}&nbsp;</span>
        {/if}
      </div>
    </div>

    <div class="contents" style="background-color: #eef; border-color: #ccf">
      <div class="image main">
        {call dma.entry.simplemainfile}
          {param entry: $entry /}
          {param size: 50 /}
        {/call}
      </div>

      {call .statistics}
        {param entry: $entry /}
      {/call}

      <div class="appearance">
        {$entry.appearance}
      </div>

     <div class="short-description">
       {annotate($entry.combined_short_description)}
     </div>

   </div>
  </div>
{/template}

/**
 * The item card.
 *
 * @param entry The entry rendered.
 */
{template .large}
  <div class="entry item card">
    <div class="header" style="background-color: #008">
      <div class="actions">
        <div class="sprite white delete" title="permanently delete this"></div>
      </div>

      <div class="title">
        {if $ij.isDM}
          {$entry.DM_name}
          {if $entry.player_name and $entry.DM_name != $entry.player_name}
            {sp}[{$entry.player_name}]
          {/if}
        {else}
          {$entry.player_name}
        {/if}
        {sp}({$entry.name})
        {if $ij.isDM and $entry.DM_name != $entry.player_name}
          <br /><span class="subtitle">{$entry.player_name}&nbsp;</span>
        {/if}
      </div>
    </div>

    <div class="contents" style="background-color: #eef; border-color: #ccf">
      <div class="top-block">
        <div class="align-center size-tiny">
          {$entry.base}
        </div>

        <div class="image main">
          {call dma.entry.simplemainfile}
            {param entry: $entry /}
            {param size: 90 /}
          {/call}
        </div>

        {call .statistics}
          {param entry: $entry /}
        {/call}
      </div>

      <div class="bottom-block">
        <div class="appearance">
          {$entry.appearance}
        </div>

        {if $entry.incomplete.present and $ij.isDM}
          <div class="incomplete">
            {call dma.value.extension}
              {param value: 'incomplete' /}
            {/call}
            {sp}
            {annotate($entry.combined_incomplete)}
          </div>
        {/if}

        <div class="description">
          {annotate($entry.combined_description)}
        </div>
        {if $entry.DM_notes.present}
          <div class="dm-notes block">
            {call dma.value.extension}
              {param value: 'notes' /}
            {/call}
            {sp}
            {$entry.dm_notes.get}
          </div>
        {/if}
        {if $entry.player_notes.present}
          <div class="player-notes block">
            {call dma.value.extension}
              {param value: 'notes' /}
            {/call}
            {sp}
            {$entry.player_notes.get}
          </div>
        {/if}
        {if $entry.container}
          <div class="content">
            {if $entry.campaign.present}
              {foreach $item in $entry.contents}
                {call .tiny}
                  {param entry: entry($entry.campaign.get.key + '/item/'
                      + $item.name) /}
                {/call}
              {/foreach}
            {/if}
          </div>
        {/if}
        <div class="references">
          {annotate($entry.combined_references)}
        </div>
      </div>
    </div>
  </div>
{/template}

/**
 * Statistics values in item the card.
 *
 * @param entry The entry shown.
 */
{template .statistics}
  <div class="statistics">
    <div class="statistics-lines">
      <div class="value">
        {call dma.value.extension}
          {param value: 'value' /}
        {/call}
        {sp}
        {annotate($entry.combined_value)}
      </div>

      <div class="hp">
        {call dma.value.extension}
          {param value: 'hp' /}
        {/call}
        {sp}
        {$entry.HP} (of{sp}
        {annotate($entry.combined_max_HP)}
      </div>

      <div class="weight">
        {call dma.value.extension}
          {param value: 'weight' /}
        {/call}
        {sp}
        {annotate($entry.combined_weight)}
      </div>
      <div class="size">
        {call dma.value.extension}
          {param value: 'size' /}
        {/call}
        {sp}
        {annotate($entry.combined_size)}
      </div>

      <div class="hardness">
        {call dma.value.extension}
          {param value: 'hardness' /}
        {/call}
        {annotate($entry.combined_hardness)}
        {sp}
        {call dma.value.extension}
          {param value: 'break' /}
        {/call}
        {annotate($entry.combined_break_DC)}
      </div>

      <div class="substance">
        {call dma.value.extension}
          {param value: 'substance' /}
        {/call}
        {sp}
        <span class="value">
          {annotate($entry.combined_thickness)}
          {sp}
          {annotate($entry.combined_substance)}
        </span>
      </div>

      {if $entry.multiple.present}
        <div class="counted">
          {call dma.value.extension}
            {param value: 'multiple' /}
          {/call}
          {sp}
          {$entry.multiple.get}
          {sp}
          {annotate($entry.combined_count_unit)}
          {sp}
        </div>
      {/if}

      {if $entry.multiuse.present}
        <div class="counted">
          {call dma.value.extension}
            {param value: 'multiuse' /}
          {/call}
          {sp}
          {$entry.multiuse.get}
          {sp}
        </div>
      {/if}

      {if $entry.wearable}
        <div class="wearable">
          {call dma.value.extension}
            {param value: 'wearable' /}
          {/call}
          {sp}
          {annotate($entry.combined_slot)}
          {sp}
          <div class="stack">
            <div>
              {annotate($entry.combined_don)}
              {annotate($entry.combined_don_hastily)}
            </div>
            <div>
              {annotate($entry.combined_remove)}
           </div>
          </div>
        </div>
      {/if}

      {if $entry.container}
        <div class="container">
          {call dma.value.extension}
            {param value: 'container' /}
          {/call}
          {sp}
          {annotate($entry.combined_capacity)}
          {sp}
          {annotate($entry.combined_state)}
        </div>
      {/if}

      {if $entry.light}
        <div class="light">
          {call dma.value.extension}
            {param value: 'light' /}
          {/call}
          {sp}
          {annotate($entry.combined_light_shape)}

          <div class="stack lead">
            <div>{annotate($entry.combined_bright_light)}</div>
            <div>{annotate($entry.combined_shadowy_light)}</div>
          </div>
        </div>
      {/if}

      {if $entry.timed}
        <div class="timed">
          {call dma.value.extension}
            {param value: 'timed' /}
          {/call}
          {sp}
          {$entry.time_left.get.to_short_string}
        </div>
      {/if}

      {if $entry.commodity}
        <div class="commodity">
          {call dma.value.extension}
            {param value: 'commodity' /}
          {/call}
          {sp}
          {annotate($entry.combined_length)}
          {annotate($entry.combined_area)}
        </div>
      {/if}
    </div>

    {if $entry.weapon}
      <div class="statistics-line weapon">
        {call dma.value.extension}
          {param value: 'weapon' /}
        {/call}
        <div class="value">
          {annotate($entry.combined_damage)}
          {if $entry.combined_secondary_damage.has_value}
            {annotate($entry.combined_secondary_damage)}
            {sp}
          {/if}
          ({if $entry.combined_splash.has_value}
            {annotate($entry.combined_splash)}
            {sp}
          {/if}
          {annotate($entry.combined_critical)},{sp}
          {annotate($entry.combined_weapon_type)},{sp}
          {annotate($entry.combined_proficiency)},{sp}
          {annotate($entry.combined_weapon_style)},{sp}
          {annotate($entry.combined_reach)}/{annotate($entry.combined_range)}
        </div>
      </div>
    {/if}
  </div>
{/template}
